password = password
)
server <- function(input, output, session){
data <- reactivePoll(intervalMillis = 5000, session, checkFunc = function(){
dbGetQuery(pool,  "select * from volet_agricole.table_unique_temporaire")
}, valueFunc = function(){
dbGetQuery(pool,   "select * from volet_agricole.table_unique_temporaire")
}
)
#Localisation du label harcodéepour démo : rajouter champ "Service" dans base avant mise en prod:
popup_content <- reactive({
paste(sep = "<br/>",
paste0("<img src='https://cen-nouvelle-aquitaine.org/wp-content/uploads/2020/09/logo_cenna.jpg' height='60%', width='60%', align='center'", "' /> <br>"),
paste0("<b><font color=\'#327599\'>Site CEN : </b></font>", data()$site),
paste0("<b><font color=\'#327599\'>Nom de l'agriculteur : </b></font>", data()$nom),
paste0("<b><font color=\'#327599\'>Prénom de l'agriculteur : </b></font>", data()$prenom),
paste0("<b><font color=\'#327599\'>Société / Appellation de l'exploitation : </b></font>", data()$societe),
paste0("<b><font color=\'#327599\'>Contact : </b></font>", data()$contact),
paste0("<b><font color=\'#327599\'>SAU exploitation: </b></font>", data()$SAU_surf),
paste0("<b><font color=\'#327599\'>Productions principales : </b></font>", data()$types_prod),
paste0("<b><font color=\'#327599\'>Produits finis : </b></font>", data()$types_vente),
paste0("<b><font color=\'#327599\'>Agriculture bio : </b></font>", data()$bio),
paste0("<br><b><font color=\'#327599\'>Type de contract agricole avec le CEN : </b></font>", data()$type_contrat_CEN),
paste0("<b><font color=\'#327599\'>Surface contractualisée : </b></font>", data()$surf_contractualisee),
paste0("<b><font color=\'#327599\'>Date de signature : </b></font>", data()$signature),
paste0("<b><font color=\'#327599\'>Date de prise d'effet : </b></font>", data()$prise_effet),
paste0("<b><font color=\'#327599\'>Date de fin : </b></font>", data()$fin),
paste0("<br><b><font color=\'#327599\'>Grands types de milieux : </b></font>", data()$grands_types_milieux),
paste0("<b><font color=\'#327599\'>Parcelles concernées : </b></font>", data()$parcelles),
paste0("<b><font color=\'#327599\'>Chargé de mission référent : </b></font>", data()$charge_mission),
paste0("<b><font color=\'#327599\'>Remarques : </b></font>", data()$remarques)
)})
agri_icon <- makeIcon(
iconUrl = "C:/Users/Romain/Downloads/agriculteur.png",
iconWidth = 30, iconHeight = 30,
)
output$map <- renderLeaflet({
leaflet() %>%
setView(lng = 0.1, lat= 45, zoom = 7) %>%
addTiles(group = "Fond de carte standard (OSM)") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Imagerie satelitte (ESRI)") %>%
addMarkers(lng= data()$longitude, lat = data()$latitude, icon = agri_icon,
clusterOptions = markerClusterOptions(),
popup =  paste0(actionButton("edition1", "Modifier la donnée", onclick = 'Shiny.onInputChange("button_click",  Math.random())'))) %>%
addPolygons(
data = depts,
fillOpacity = 0,
weight = 1,
opacity = 1,
color = "black",
group = "Départements") %>%
addLayersControl(
overlayGroups = c("Départements"),
baseGroups = c("Fond de carte standard (OSM)", "Imagerie satelitte (ESRI)"),
options = layersControlOptions(collapsed = FALSE))
})
observeEvent(input$button_click, {
shinyalert(title = "Le formulaire d'édition / suprresion n'a pas encore été codé !", type = "success")
# showModal(modalDialog(title = "Modification de la donnée sélectionnée",
#
#                       fluidRow(align ="center",
#                                column(width = 12, h4("Informations générales"), br()),
#                                column(width = 6,
#                                       selectInput("site", "Site(s) CEN concerné(s)", choices = c("Site 1", "Site 2", "Site 3", "Site 4"), selected = "Site 1", multiple = TRUE),
#                                       textInput("societe", "Société / Appellation de l'exploitation", "")),
#                                column(width = 6,
#                                       textInput("nom", "Nom", ""),
#                                       textInput("prenom", "Prénom", "")),
#                                column(width = 12,
#                                       textInput("contact", "Contact", ""))
#                       ),
#
#                       fluidRow(align ="center",
#                                column(width = 12, h4("Informations relatives à l'exploitation"), br()),
#                                column(width = 6,
#                                       numericInput("SAU_surf", "SAU exploitation (ha)", 1, min = 1, max = 1000, step = 0.5),
#                                       selectInput("types_prod", "Productions principales", sort(c("filière céréalière", "filière fruits et légumes", "filière horticole", "filière oléagineux", "filière lait : bovin", "filière lait : caprin", "filière lait : équin", "filière semence", "filière viandes : bovine", "filière viandes : ovine",  "filière viandes : asin",  "filière viandes : caprine", "filière viandes : porcine", "filière viticole", "filière aquacole", "filière saliculture", "filière apiculture", "filière herboristerie", "Culture marines", "Autres")), selected = "Autres", multiple = TRUE)),
#                                column(width = 6,
#                                       selectInput("types_vente", "Produits finis", sort(c("farine" , "conserve" , "fromage" , "lait" , "yaourt" , "laine" , "caissette viande" , "miel" , "tisane" , "fruits secs" , "céréales" , "huîtres" , "sel" , "hydrolat" , "cuir" , "chanvre" , "charcuterie" , "crevettes" , "coquillages" , "crustacés" , "produits cosmétiques" , "poissons")), selected = "chanvre", multiple = TRUE),
#                                       checkboxInput("bio", "Agriculture bio", FALSE))),
#
#                       fluidRow(align ="center",
#                                column(width = 12, h4("Informations relatives au partenariat avec le CEN"), br()),
#                                column(width = 6,
#                                       selectInput("type_contrat_CEN", "Type de contrat agricole avec le CEN", sort(c("BRCE" , "Commodat" , "Contrat de pâturage" , "Convention pluriannuelle de pâturage" , "PUBF" , "AOT" , "Convention d'occupation précaire" , "Bail verbal" , "CMD SAFER")), selected = "AOT", multiple = TRUE),
#                                       numericInput("surf_contractualisee", "Surface contractualisée", 1, min = 1, max = 1000, step = 0.5)),
#                                column(width = 6,
#                                       dateInput("signature", "Date de signature"),
#                                       dateInput("prise_effet", "Date de prise d'effet"))),
#
#                       fluidRow(align ="center",
#                                column(width = 6,
#                                       dateInput("fin", "Date de fin"),
#                                       selectInput("grands_types_milieux", "Grands types de milieux", choices = c("Lune", "Mars", "Terre", "Venus"), selected = "Lune", multiple = TRUE)),
#                                column(width = 6,
#                                       selectInput("parcelles", "Parcelles concernées", choices = c("KJ4568", "ZE7894f"), selected = "KJ4568", multiple = TRUE),
#                                       selectInput("charge_mission", "Chargé(e) de mission référent", choices = c("Personne A", "Personne B"), selected = "Personne"))),
#
#                       fluidRow(align ="center",
#                                column(width = 12,
#                                       textAreaInput("remarques", "Remarques", width = "400px"))),
#                       br(),
#                       fluidRow(align="center",
#                                column(width = 12,
#                                       # tags$head(tags$style(".butt3{background-color:#16881B;} .butt3{color: #e6ebef;}")),
#                                       actionButton(inputId = "save_BDD",label = "Enregistrer", class="butt3", style = "width:250px"))),
#                       size = "l",
#                       easyClose = TRUE,
#                       fade = TRUE,
#                       footer = tagList(modalButton("Annuler"))
# ))
})
observeEvent(input$map_shape_click, {
showModal(modalDialog(title = "Formulaire d'informations",
fluidRow(align ="center",
column(width = 12, h4("Informations générales"), br()),
column(width = 6,
selectInput("site", "Site(s) CEN concerné(s)", choices = c("Site 1", "Site 2", "Site 3", "Site 4"), selected = "Site 1", multiple = TRUE),
textInput("societe", "Société / Appellation de l'exploitation", "")),
column(width = 6,
textInput("nom", "Nom", ""),
textInput("prenom", "Prénom", "")),
column(width = 12,
textInput("contact", "Contact", ""))
),
fluidRow(align ="center",
column(width = 12, h4("Informations relatives à l'exploitation"), br()),
column(width = 6,
numericInput("SAU_surf", "SAU exploitation (ha)", 1, min = 1, max = 1000, step = 0.5),
selectInput("types_prod", "Productions principales", sort(c("filière céréalière", "filière fruits et légumes", "filière horticole", "filière oléagineux", "filière lait : bovin", "filière lait : caprin", "filière lait : équin", "filière semence", "filière viandes : bovine", "filière viandes : ovine",  "filière viandes : asin",  "filière viandes : caprine", "filière viandes : porcine", "filière viticole", "filière aquacole", "filière saliculture", "filière apiculture", "filière herboristerie", "Culture marines", "Autres")), selected = "Autres", multiple = TRUE)),
column(width = 6,
selectInput("types_vente", "Produits finis", sort(c("farine" , "conserve" , "fromage" , "lait" , "yaourt" , "laine" , "caissette viande" , "miel" , "tisane" , "fruits secs" , "céréales" , "huîtres" , "sel" , "hydrolat" , "cuir" , "chanvre" , "charcuterie" , "crevettes" , "coquillages" , "crustacés" , "produits cosmétiques" , "poissons")), selected = "chanvre", multiple = TRUE),
checkboxInput("bio", "Agriculture bio", FALSE))),
fluidRow(align ="center",
column(width = 12, h4("Informations relatives au partenariat avec le CEN"), br()),
column(width = 6,
selectInput("type_contrat_CEN", "Type de contrat agricole avec le CEN", sort(c("BRCE" , "Commodat" , "Contrat de pâturage" , "Convention pluriannuelle de pâturage" , "PUBF" , "AOT" , "Convention d'occupation précaire" , "Bail verbal" , "CMD SAFER")), selected = "AOT", multiple = TRUE),
numericInput("surf_contractualisee", "Surface contractualisée", 1, min = 1, max = 1000, step = 0.5)),
column(width = 6,
dateInput("signature", "Date de signature"),
dateInput("prise_effet", "Date de prise d'effet"))),
fluidRow(align ="center",
column(width = 6,
dateInput("fin", "Date de fin"),
selectInput("grands_types_milieux", "Grands types de milieux", choices = c("Lune", "Mars", "Terre", "Venus"), selected = "Lune", multiple = TRUE)),
column(width = 6,
selectInput("parcelles", "Parcelles concernées", choices = c("KJ4568", "ZE7894f"), selected = "KJ4568", multiple = TRUE),
selectInput("charge_mission", "Chargé(e) de mission référent", choices = c("Personne A", "Personne B"), selected = "Personne"))),
fluidRow(align ="center",
column(width = 12,
textAreaInput("remarques", "Remarques", width = "400px"))),
br(),
fluidRow(align="center",
column(width = 12,
# tags$head(tags$style(".butt3{background-color:#16881B;} .butt3{color: #e6ebef;}")),
actionButton(inputId = "save_BDD",label = "Enregistrer", class="butt3", style = "width:250px"))),
size = "l",
easyClose = TRUE,
fade = TRUE,
footer = tagList(modalButton("Annuler"))
))
})
observeEvent(input$SAU_surf, {
if(is.na(as.numeric(input$SAU_surf))){
showModal(modalDialog(
title = "Attention",
"Seuls les chiffres sont autorisés !",
easyClose = TRUE
))
}
})
observeEvent(input$surf_contractualisee, {
if(is.na(as.numeric(input$surf_contractualisee))){
showModal(modalDialog(
title = "Attention",
"Seuls les chiffres sont autorisés !",
easyClose = TRUE
))
}
})
observeEvent(input$save_BDD, {
click <- input$map_shape_click
# print(paste0(input$nom , input$prenom , input$societe, input$contact, input$SAU_surf, input$types_prod, input$types_vente, input$bio, input$type_contrat_CEN, input$surf_contractualisee, input$signature, input$prise_effet, input$fin, input$grands_types_milieux,  input$parcelles, input$charge_mission, input$remarques, click$lat, click$lng ))
tryCatch(
{
dbExecute(pool, sqlInterpolate(pool,"INSERT INTO volet_agricole.table_unique_temporaire(site_cen, nom_agri, prenom_agri, societe, contact, surf_ha, types_productions, produits_finis, agriculture_bio, type_contrat, surf_contractualisee, date_signature, date_prise_effet, date_fin, types_milieux, parcelles, referent, remarques, latitude, longitude) VALUES (?site_cen, ?nom_agri, ?prenom_agri, ?societe, ?contact, ?surf_ha, ?types_productions, ?produits_finis, ?agriculture_bio, ?type_contrat, ?surf_contractualisee, ?date_signature, ?date_prise_effet, ?date_fin, ?types_milieux, ?parcelles, ?referent, ?remarques, ?latitude, ?longitude)",
site_cen = input$site , nom_agri = input$nom , prenom_agri = input$prenom , societe= input$societe, contact = input$contact, surf_ha = input$SAU_surf, types_productions = input$types_prod, produits_finis= input$types_vente, agriculture_bio = input$bio, type_contrat=input$type_contrat_CEN, surf_contractualisee = input$surf_contractualisee, date_signature = input$signature, date_prise_effet = input$prise_effet, date_fin = input$fin, types_milieux = input$grands_types_milieux, parcelles = input$parcelles, referent = input$charge_mission, remarques = input$remarques, latitude = click$lat, longitude = click$lng ))
shinyalert(title = "Données bien enregistrées dans la BDD", type = "success")
},
error = function(e) {
shinyalert(title = "Impossible d'enregistrer les données dans la BDD", type = "error")
}
)
})
}
# # Execute insert query with input values
# dbExecute(pool, sqlInterpolate(pool,"INSERT INTO volet_agricole.societe(surface_ha, nom, latitude, longitude) VALUES (${surface_ha}, ${nom}, ${latitude}, ${longitude})",
#                               surface_ha = input$surface_ha, nom = input$nom, latitude = input$latitude, input$longitude))
# societe_id <- dbGetQuery(con, "SELECT lastval()")[[1, 1]]
#
#
# dbExecute(pool, sqlInterpolate(pool,"INSERT INTO volet_agricole.agriculteur(surface_ha, nom, latitude, longitude) VALUES (${surface_ha}, ${nom}, ${latitude}, ${longitude})",
#                                surface_ha = input$surface_ha, nom = input$nom, latitude = input$latitude, input$longitude))
# societe_id <- dbGetQuery(con, "SELECT lastval()")[[1, 1]]
#
#
# dbExecute(pool, sqlInterpolate(pool,"INSERT INTO volet_agricole.productions_principales(surface_ha, nom, latitude, longitude) VALUES (${surface_ha}, ${nom}, ${latitude}, ${longitude})",
#                                surface_ha = input$surface_ha, nom = input$nom, latitude = input$latitude, input$longitude))
# societe_id <- dbGetQuery(con, "SELECT lastval()")[[1, 1]]
#
#
# dbExecute(pool, sqlInterpolate(pool,"INSERT INTO volet_agricole.produits_finis(surface_ha, nom, latitude, longitude) VALUES (${surface_ha}, ${nom}, ${latitude}, ${longitude})",
#                                surface_ha = input$surface_ha, nom = input$nom, latitude = input$latitude, input$longitude))
# societe_id <- dbGetQuery(con, "SELECT lastval()")[[1, 1]]
#
#
# dbExecute(pool, sqlInterpolate(pool,"INSERT INTO volet_agricole.types_milieux(surface_ha, nom, latitude, longitude) VALUES (${surface_ha}, ${nom}, ${latitude}, ${longitude})",
#                                surface_ha = input$surface_ha, nom = input$nom, latitude = input$latitude, input$longitude))
# societe_id <- dbGetQuery(con, "SELECT lastval()")[[1, 1]]
#
#
# dbExecute(pool, sqlInterpolate(pool,"INSERT INTO volet_agricole.charge_mission_ref(surface_ha, nom, latitude, longitude) VALUES (${surface_ha}, ${nom}, ${latitude}, ${longitude})",
#                                surface_ha = input$surface_ha, nom = input$nom, latitude = input$latitude, input$longitude))
# societe_id <- dbGetQuery(con, "SELECT lastval()")[[1, 1]]
#
#
# dbExecute(pool, sqlInterpolate(pool,"INSERT INTO volet_agricole.partenariat_cen(surface_ha, nom, latitude, longitude) VALUES (${surface_ha}, ${nom}, ${latitude}, ${longitude})",
#                                surface_ha = input$surface_ha, nom = input$nom, latitude = input$latitude, input$longitude))
# societe_id <- dbGetQuery(con, "SELECT lastval()")[[1, 1]]
#
shinyApp(ui, server)
dbname_id = "congres_2023"
host_id = "database.cen-nouvelle-aquitaine.dev"
user_id = "beta_user"
password = "test"
pool <- dbPool(
drv = dbDriver("PostgreSQL"),
dbname = dbname_id,
host = host_id,
user = user_id,
password = password
)
dbname_id = "congres_2023"
host_id = "database.cen-nouvelle-aquitaine.dev"
user_id = "user_volet_agricole"
password = "test"
pool <- dbPool(
drv = dbDriver("PostgreSQL"),
dbname = dbname_id,
host = host_id,
user = user_id,
password = password
)
dbname_id = "congres_2023"
host_id = "database.cen-nouvelle-aquitaine.dev"
user_id = "user_volet_agricole"
password = "test"
pool <- dbPool(
drv = dbDriver("PostgreSQL"),
dbname = dbname_id,
host = host_id,
user = user_id,
password = password
)
library(shiny)
library(sf)
library(shinycssloaders)
library(leaflet)
library(shinyjs)
library(bslib)
library(DBI)
library(pool)
library(RPostgreSQL)
library(shinyalert)
library(shinyvalidate)
dbname_id = "congres_2023"
host_id = "database.cen-nouvelle-aquitaine.dev"
user_id = "user_volet_agricole"
password = "test"
pool <- dbPool(
drv = dbDriver("PostgreSQL"),
dbname = dbname_id,
host = host_id,
user = user_id,
password = password
)
library(shiny)
library(sf)
library(shinycssloaders)
library(leaflet)
library(shinyjs)
library(bslib)
library(DBI)
library(pool)
library(RPostgres)
library(shinyalert)
library(shinyvalidate)
dbname_id = "congres_2023"
host_id = "database.cen-nouvelle-aquitaine.dev"
user_id = "user_volet_agricole"
password = "test"
pool <- dbPool(
drv = dbDriver("PostgreSQL"),
dbname = dbname_id,
host = host_id,
user = user_id,
password = password
)
pool <- dbPool(
drv = dbDriver("PostgreSQL"),
dbname = dbname_id,
host = host_id,
user = user_id,
password = password
)
library(shiny)
library(sf)
library(shinycssloaders)
library(leaflet)
library(shinyjs)
library(bslib)
library(DBI)
library(pool)
library(RPostgres)
library(shinyalert)
library(shinyvalidate)
dbname_id = "congres_2023"
host_id = "database.cen-nouvelle-aquitaine.dev"
user_id = "user_volet_agricole"
password = "test"
pool <- dbPool(
drv = dbDriver("Postgres"),
dbname = dbname_id,
host = host_id,
user = user_id,
password = password
)
# dbGetInfo(pool)
onStop(function() {
print("Déconnexion de la BD (preventing dabatase connection leaking...)")
# poolClose(pool)
})
region_NA <- geojson_read("depts_na.geojson",  what = "sp")
library(shiny)
library(sf)
library(shinycssloaders)
library(leaflet)
library(shinyjs)
library(bslib)
library(DBI)
library(pool)
library(RPostgres)
library(shinyalert)
library(shinyvalidate)
library(geojsonio)
dbname_id = "congres_2023"
host_id = "database.cen-nouvelle-aquitaine.dev"
user_id = "user_volet_agricole"
password = "test"
pool <- dbPool(
drv = dbDriver("Postgres"),
dbname = dbname_id,
host = host_id,
user = user_id,
password = password
)
# dbGetInfo(pool)
onStop(function() {
print("Déconnexion de la BD (preventing dabatase connection leaking...)")
# poolClose(pool)
})
region_NA <- geojson_read("depts_na.geojson",  what = "sp")
setwd("C:/Users/Romain/Downloads/gt_volet_agricole")
library(shiny)
library(sf)
library(shinycssloaders)
library(leaflet)
library(shinyjs)
library(bslib)
library(DBI)
library(pool)
library(RPostgres)
library(shinyalert)
library(shinyvalidate)
library(geojsonio)
dbname_id = "congres_2023"
host_id = "database.cen-nouvelle-aquitaine.dev"
user_id = "user_volet_agricole"
password = "test"
pool <- dbPool(
drv = dbDriver("Postgres"),
dbname = dbname_id,
host = host_id,
user = user_id,
password = password
)
# dbGetInfo(pool)
onStop(function() {
print("Déconnexion de la BD (preventing dabatase connection leaking...)")
# poolClose(pool)
})
region_NA <- geojson_read("depts_na.geojson",  what = "sp")
a = dbGetQuery(pool,  "select * from volet_agricole.table_unique_temporaire")
dbname_id = "congres_2023"
host_id = "database.cen-nouvelle-aquitaine.dev"
user_id = "user_volet_agricole"
password = "fu1ZD9uCl3LzSf"
pool <- dbPool(
drv = dbDriver("Postgres"),
dbname = dbname_id,
host = host_id,
user = user_id,
password = password
)
dbname_id = "congres_2023"
host_id = "database.cen-nouvelle-aquitaine.dev"
user_id = "user_volet_agricole"
password = "fu1ZD9uCl3LzSf"
pool <- dbPool(
drv = dbDriver("Postgres"),
dbname = dbname_id,
host = host_id,
user = user_id,
password = password
)
test <- Sys.getenv("dbname_id")
test <- Sys.getenv("user_id")
library(shiny)
library(sf)
library(shinycssloaders)
library(leaflet)
library(shinyjs)
library(bslib)
library(DBI)
library(pool)
library(RPostgres)
library(shinyalert)
library(shinyvalidate)
library(geojsonio)
pool <- dbPool(
drv = dbDriver("Postgres"),
dbname = Sys.getenv("dbname_id"),
host = Sys.getenv("host_id"),
user = Sys.getenv("user_id"),
password = Sys.getenv("password")
)
test <- Sys.getenv("dbname_id")
test <- Sys.getenv("host_id")
test <- Sys.getenv("user_id")
setwd("C:/Users/Romain/Downloads/gt_volet_agricole")
dbname_id <- Sys.getenv("dbname_id")
host_id <- Sys.getenv("host_id")
user_id <- Sys.getenv("user_id")
password <- Sys.getenv("password")
dbname_id <- Sys.getenv("dbname_id")
user_id <- Sys.getenv("user_id")
user_id <- Sys.getenv("user_id")
password <- Sys.getenv("password")
Sys.unsetenv("password") # on Unix-alike may warn and not succeed
password <- Sys.getenv("password")
password <- Sys.getenv("password")
pool <- dbPool(
drv = dbDriver("Postgres"),
dbname = Sys.getenv("dbname_id"),
host = Sys.getenv("host_id"),
user = Sys.getenv("user_id"),
password = Sys.getenv("password")
)
library(shiny)
library(sf)
library(shinycssloaders)
library(leaflet)
library(shinyjs)
library(bslib)
library(DBI)
library(pool)
library(RPostgres)
library(shinyalert)
library(shinyvalidate)
library(geojsonio)
pool <- dbPool(
drv = dbDriver("Postgres"),
dbname = Sys.getenv("dbname_id"),
host = Sys.getenv("host_id"),
user = Sys.getenv("user_id"),
password = Sys.getenv("password")
)
password <- Sys.getenv("password")
setwd("C:/Users/Romain/Downloads/gt_volet_agricole")
password <- Sys.getenv("password")
print(Sys.getenv())
Sys.unsetenv("password") # on Unix-alike may warn and not succeed
print(Sys.getenv())
Sys.unsetenv("host") # on Unix-alike may warn and not succeed
Sys.unsetenv("user") # on Unix-alike may warn and not succeed
Sys.unsetenv("dbname") # on Unix-alike may warn and not succeed
print(Sys.getenv())
Sys.unsetenv("user_id") # on Unix-alike may warn and not succeed
Sys.unsetenv("dbnam_ide") # on Unix-alike may warn and not succeed
Sys.unsetenv("dbname_id") # on Unix-alike may warn and not succeed
Sys.unsetenv("host_id") # on Unix-alike may warn and not succeed
print(Sys.getenv())
print(Sys.getenv())
setwd("C:/Users/Romain/Downloads/gt_volet_agricole")
library(shiny)
detach("package:shiny", unload = TRUE)
library(fontawesome)
unlink("M365_cache", recursive = TRUE)
library(markdown)
library(knitr)
library(prettydoc)
library(pander)
